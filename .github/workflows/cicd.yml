name: CI/CD with GitHub Actions

on:
  push:
    branches: ['dev', 'main']
  pull_request:
    branches: ['dev', 'main']

jobs:
# ────────────────────────────────────────────────
# 1) BUILD – .vercel/output 생성 & 압축 업로드
# ────────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    strategy:
      matrix: { node-version: [22.x] }

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # ─── Vercel 환경변수/프로젝트 설정 가져오기 ───
      - name: Pull Vercel ENV (preview)
        if: github.ref == 'refs/heads/dev'
        run: |
          vercel pull --yes \
            --environment preview \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      - name: Pull Vercel ENV (production)
        if: github.ref == 'refs/heads/main'
        run: |
          vercel pull --yes \
            --environment production \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      - name: Lint (ignore errors)
        run: npm run lint
        continue-on-error: true

      # ─── .vercel/output 생성 ───
      - name: Vercel build
        run: |
          vercel build --yes \
            ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      # ─── 디렉터리 확인 (디버그) ───
      - name: Show .vercel tree
        run: |
          echo "=== .vercel 디렉터리 ==="
          ls -Rla .vercel

      # ─── .vercel 전체 tar.gz로 묶어 업로드 ───
      - name: Archive .vercel folder
        run: tar -czf vercel-prebuilt.tgz .vercel

      - name: Upload prebuilt artifact
        uses: actions/upload-artifact@v4
        with:
          name: vercel-prebuilt
          path: vercel-prebuilt.tgz
          retention-days: 1
          if-no-files-found: error

# ────────────────────────────────────────────────
# 2) DEPLOY – 압축 해제 후 --prebuilt 배포
# ────────────────────────────────────────────────
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Download prebuilt artifact
        uses: actions/download-artifact@v4
        with:
          name: vercel-prebuilt

      - name: Extract prebuilt
        run: tar -xzf vercel-prebuilt.tgz

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # ─── 프리빌트 배포 ───
      - name: Deploy to Vercel (preview)
        if: github.ref == 'refs/heads/dev'
        run: |
          url=$(vercel deploy --prebuilt --yes \
                               --scope udt \
                               --token ${{ secrets.VERCEL_TOKEN }})
          echo "Preview URL: $url"
          echo "VERCEL_PREVIEW_URL=$url" >> $GITHUB_ENV

      - name: Deploy to Vercel (production)
        if: github.ref == 'refs/heads/main'
        run: |
          url=$(vercel deploy --prebuilt --prod --yes \
                               --scope udt \
                               --token ${{ secrets.VERCEL_TOKEN }})
          echo "Production URL: $url"
          echo "VERCEL_PRODUCTION_URL=$url" >> $GITHUB_ENV

