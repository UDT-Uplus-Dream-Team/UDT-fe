name: CI/CD with Github Actions

on:
  push:
    branches: ['dev', 'main']
  pull_request:
    branches: ['dev', 'main']

jobs:
# ─────────────────────────────────────────────────────────────
# 1. Build & Test
# ─────────────────────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # ────────── 환경변수 & 프로젝트 설정 가져오기 ──────────
      - name: Pull Vercel Environment (Preview)
        if: github.ref == 'refs/heads/dev'
        run: vercel pull --yes --environment=preview --scope=udt --token=${{ secrets.VERCEL_TOKEN }}

      - name: Pull Vercel Environment (Production)
        if: github.ref == 'refs/heads/main'
        run: vercel pull --yes --environment=production --scope=udt --token=${{ secrets.VERCEL_TOKEN }}

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      # ────────── 핵심: vercel build 실행 → .vercel/output 생성 ──────────
      - name: Build with Vercel (Preview)            ### NEW
        if: github.ref == 'refs/heads/dev'
        run: |
          vercel build --yes \
            --scope=udt \
            --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build with Vercel (Production)         ### NEW
        if: github.ref == 'refs/heads/main'
        run: |
          vercel build --prod --yes \
            --scope=udt \
            --token=${{ secrets.VERCEL_TOKEN }}

      # ────────── .vercel 전체를 아티팩트로 업로드 ──────────
      - name: Upload build artifacts                 ### CHANGED
        uses: actions/upload-artifact@v4
        with:
          name: vercel-build-output
          path: |
            .vercel/**          # project.json + output 모두 포함
          retention-days: 1

# ─────────────────────────────────────────────────────────────
# 2. Deploy
# ─────────────────────────────────────────────────────────────
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts               ### CHANGED
        uses: actions/download-artifact@v4
        with:
          name: vercel-build-output

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # ────────── 업로드된 .vercel/output을 그대로 배포 ──────────
      - name: Deploy to Vercel (Preview)
        if: github.ref == 'refs/heads/dev'
        run: |
          url=$(vercel deploy --prebuilt --yes --scope=udt --token=${{ secrets.VERCEL_TOKEN }})
          echo "Preview URL: $url"
          echo "VERCEL_PREVIEW_URL=$url" >> $GITHUB_ENV

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          url=$(vercel deploy --prebuilt --prod --yes --scope=udt --token=${{ secrets.VERCEL_TOKEN }})
          echo "Production URL: $url"
          echo "VERCEL_PRODUCTION_URL=$url" >> $GITHUB_ENV
