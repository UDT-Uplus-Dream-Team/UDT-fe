name: CI/CD with Github Actions

on:
  push:
    branches: ['dev', 'main']
  pull_request:
    branches: ['dev', 'main']

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        continue-on-error: true # 린트 에러가 있어도 빌드 계속 진행

      - name: Build Next.js application
        run: npm run build
        env:
          NODE_ENV: production
          # 환경 변수를 빌드 시점에 직접 주입
          NEXT_PUBLIC_API_BASE_URL: https://api.banditbool.com

      - name: Upload build artifacts
        if: matrix.node-version == '22.x' # 한 번만 업로드
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: |
            .next/
            public/
            package.json
            next.config.ts
          retention-days: 1

  # Vercel 배포 작업 (빌드가 성공했을 때만 실행)
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 빌드된 artifacts 다운로드 (중요!)
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # 환경별로 다른 vercel pull 실행
      - name: Pull Vercel Environment Information (Preview)
        if: github.ref == 'refs/heads/dev'
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Pull Vercel Environment Information (Production)
        if: github.ref == 'refs/heads/main'
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      # vercel build 단계 제거 (이미 GitHub Actions에서 빌드됨)
      # 기존의 "Build Project Artifacts" 단계들 삭제

      - name: Deploy to Vercel (Preview)
        if: github.ref == 'refs/heads/dev'
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "Preview URL: $url"
          echo "VERCEL_PREVIEW_URL=$url" >> $GITHUB_ENV

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "Production URL: $url"
          echo "VERCEL_PRODUCTION_URL=$url" >> $GITHUB_ENV

      - name: Comment PR with preview link
        if: github.base_ref == 'dev' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Preview deployment ready!\n\n👀 Preview: ${process.env.VERCEL_PREVIEW_URL}`
            })

  # 라이트하우스 성능 테스트 (선택사항)
  # lighthouse:
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Wait for deployment
  #       run: sleep 30

  #     - name: Run Lighthouse CI
  #       uses: treosh/lighthouse-ci-action@v10
  #       with:
  #         urls: |
  #           ${{ needs.deploy.outputs.deployment_url || 'https://your-domain.vercel.app' }}
  #         configPath: './lighthouserc.js'
  #         uploadArtifacts: true
  #         temporaryPublicStorage: true
