name: CI/CD with GitHub Actions

on:
  push:
    branches: ['dev', 'main']
  pull_request:
    branches: ['dev', 'main']

jobs:
  # ──────────────
  # 1) BUILD JOB
  # ──────────────
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4

      # Node 22.x + npm 11.x 환경 강제 (엔진 경고 방지)
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - run: npm install -g npm@11.3.0
      - run: npm ci
      - run: npm install -g vercel@latest

      # 환경(prod/preview) 자동 분기 (출력값 GITHUB_ENV로)
      - name: Set VERCEL_ENV
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "VERCEL_ENV=production" >> $GITHUB_ENV
          else
            echo "VERCEL_ENV=preview" >> $GITHUB_ENV
          fi

      # Vercel 환경변수 파일 자동 pull
      - run: |
          vercel pull --yes \
            --environment $VERCEL_ENV \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      # Next.js 빌드 (에러 발생 시 즉시 실패)
      - run: npm run build

      # Prebuilt 아카이브(.next, .vercel/output 모두 포함)
      - run: tar -czf vercel-prebuilt.tgz .next .vercel/output

      # 업로드
      - uses: actions/upload-artifact@v4
        with:
          name: vercel-prebuilt
          path: vercel-prebuilt.tgz
          retention-days: 1
          if-no-files-found: error

  # ──────────────
  # 2) DEPLOY JOB
  # ──────────────
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4

      # Node 22.x + npm 11.x 환경 맞추기
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - run: npm install -g npm@11.3.0
      - run: npm ci
      - run: npm install -g vercel@latest

      # 빌드 산출물 다운로드 및 해제
      - uses: actions/download-artifact@v4
        with:
          name: vercel-prebuilt

      - run: tar -xzf vercel-prebuilt.tgz

      # 환경(prod/preview) 자동 분기
      - name: Set VERCEL_ENV
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "VERCEL_ENV=production" >> $GITHUB_ENV
          else
            echo "VERCEL_ENV=preview" >> $GITHUB_ENV
          fi

      # Vercel 환경변수 파일 pull (혹시 빌드 산출물에 필요한 경우)
      - run: |
          vercel pull --yes \
            --environment $VERCEL_ENV \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      # Prebuilt Deploy
      - name: Deploy to Vercel (Preview)
        if: github.ref == 'refs/heads/dev'
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "Preview URL: $url"
          echo "VERCEL_PREVIEW_URL=$url" >> $GITHUB_ENV

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "Production URL: $url"
          echo "VERCEL_PRODUCTION_URL=$url" >> $GITHUB_ENV
