name: CI/CD with GitHub Actions

on:
  push:
    branches: ['dev', 'main']
  pull_request:
    branches: ['dev', 'main']

jobs:
# ───────────────────────────────────────────
# 1) BUILD – .vercel/output + tar 아카이브
# ───────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - run: npm ci
      - run: npm install -g vercel@latest

      # Vercel 환경변수(Pull) 분기 처리
      - name: Set VERCEL_ENV
        id: set_env
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "VERCEL_ENV=production" >> $GITHUB_ENV
          else
            echo "VERCEL_ENV=preview" >> $GITHUB_ENV
          fi

      # ENV 가져오기 (환경 분기 적용)
      - run: |
          vercel pull --yes \
            --environment $VERCEL_ENV \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      # 빌드
      - run: |
          vercel build --yes \
            $([[ "${GITHUB_REF}" == "refs/heads/main" ]] && echo "--prod") \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      # 빌드 결과 압축(.vercel/output만)
      - run: tar -czf vercel-prebuilt.tgz .vercel/output

      # 업로드
      - uses: actions/upload-artifact@v4
        with:
          name: vercel-prebuilt
          path: vercel-prebuilt.tgz
          retention-days: 1
          if-no-files-found: error

# ───────────────────────────────────────────
# 2) DEPLOY – 아티팩트 다운로드+해제+의존성+배포
# ───────────────────────────────────────────
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      # 빌드 산출물 다운로드 및 해제
      - uses: actions/download-artifact@v4
        with:
          name: vercel-prebuilt

      - run: tar -xzf vercel-prebuilt.tgz

      # 의존성 설치
      - run: npm ci
      - run: npm install -g vercel@latest

      # Vercel 환경변수(Pull) 분기 처리
      - name: Set VERCEL_ENV
        id: set_env
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "VERCEL_ENV=production" >> $GITHUB_ENV
          else
            echo "VERCEL_ENV=preview" >> $GITHUB_ENV
          fi

      # ENV 가져오기
      - run: |
          vercel pull --yes \
            --environment $VERCEL_ENV \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      # Prebuilt 배포
      - name: Deploy to Vercel (Preview)
        if: github.ref == 'refs/heads/dev'
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "Preview URL: $url"
          echo "VERCEL_PREVIEW_URL=$url" >> $GITHUB_ENV

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "Production URL: $url"
          echo "VERCEL_PRODUCTION_URL=$url" >> $GITHUB_ENV

