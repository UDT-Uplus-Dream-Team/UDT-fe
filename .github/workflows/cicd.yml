name: CI/CD with GitHub Actions

on:
  push:
    branches: ['dev', 'main']
  pull_request:
    branches: ['dev', 'main']

jobs:
# ──────────────────────────────────────────────────────
# 1) BUILD – 프리빌트 산출물(.vercel/output) 생성
# ──────────────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # ───── Vercel 환경변수 / 프로젝트 파일 가져오기 ─────
      - name: Pull Vercel ENV (preview)
        if: github.ref == 'refs/heads/dev'
        run: |
          vercel pull --yes \
            --environment preview \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      - name: Pull Vercel ENV (production)
        if: github.ref == 'refs/heads/main'
        run: |
          vercel pull --yes \
            --environment production \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      - name: Run lint (ignore errors)
        run: npm run lint
        continue-on-error: true

      # ───── .vercel/output 생성 ─────
      - name: Vercel build (preview)
        if: github.ref == 'refs/heads/dev'
        run: |
          vercel build --yes \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      - name: Vercel build (production)
        if: github.ref == 'refs/heads/main'
        run: |
          vercel build --prod --yes \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      # ───── 산출물 업로드 (.vercel/**) ─────
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vercel-build-output
          path: .vercel/**
          retention-days: 1
          if-no-files-found: error

# ──────────────────────────────────────────────────────
# 2) DEPLOY – 프리빌트 그대로 업로드
# ──────────────────────────────────────────────────────
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: vercel-build-output
          merge-multiple: true   # 여러 청크 자동 병합

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # ───── 프리빌트 배포 ─────
      - name: Deploy to Vercel (preview)
        if: github.ref == 'refs/heads/dev'
        run: |
          url=$(vercel deploy --prebuilt --yes \
                               --scope udt \
                               --token ${{ secrets.VERCEL_TOKEN }})
          echo "Preview URL: $url"
          echo "VERCEL_PREVIEW_URL=$url" >> $GITHUB_ENV

      - name: Deploy to Vercel (production)
        if: github.ref == 'refs/heads/main'
        run: |
          url=$(vercel deploy --prebuilt --prod --yes \
                               --scope udt \
                               --token ${{ secrets.VERCEL_TOKEN }})
          echo "Production URL: $url"
          echo "VERCEL_PRODUCTION_URL=$url" >> $GITHUB_ENV

      # ───── PR 코멘트 (옵션) ─────
      - name: Comment PR with preview link
        if: github.base_ref == 'dev' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Preview deployment ready!\n\n👀 Preview: ${process.env.VERCEL_PREVIEW_URL}`
            })
