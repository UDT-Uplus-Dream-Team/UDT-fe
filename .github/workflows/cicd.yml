name: CI/CD with Github Actions

on:
  push:
    branches: ['dev', 'main']
  pull_request:
    branches: ['dev', 'main']

jobs:
# ──────────────────────────────────────────────────────
# 1) BUILD (프리빌트 산출물 생성)
# ──────────────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # ───────── Vercel 프로젝트·ENV 끌어오기 ─────────
      - name: Pull Vercel ENV (preview)
        if: github.ref == 'refs/heads/dev'
        run: vercel pull --yes --environment=preview    \
                         --scope=udt --token=${{ secrets.VERCEL_TOKEN }}

      - name: Pull Vercel ENV (production)
        if: github.ref == 'refs/heads/main'
        run: vercel pull --yes --environment=production \
                         --scope=udt --token=${{ secrets.VERCEL_TOKEN }}

      # ───────── Lint (에러 무시) ─────────
      - name: Run lint
        run: npm run lint
        continue-on-error: true

      # ───────── .vercel/output 생성 ─────────
      - name: Vercel build (preview)
        if: github.ref == 'refs/heads/dev'
        run: vercel build --yes                     \
                          --scope=udt --token=${{ secrets.VERCEL_TOKEN }}

      - name: Vercel build (production)
        if: github.ref == 'refs/heads/main'
        run: vercel build --prod --yes              \
                          --scope=udt --token=${{ secrets.VERCEL_TOKEN }}

      # ───────── 산출물 업로드 (.vercel/**) ─────────
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vercel-build-output        # ↓ 반드시 동일 이름
          path: .vercel/**
          retention-days: 1
          if-no-files-found: error

# ──────────────────────────────────────────────────────
# 2) DEPLOY (프리빌트 직접 업로드)
# ──────────────────────────────────────────────────────
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: vercel-build-output        # ↑ 업로드 때와 정확히 일치
          merge-multiple: true             # 파일 조각 자동 병합

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # ───────── 프리빌트 배포 ─────────
      - name: Deploy to Vercel (preview)
        if: github.ref == 'refs/heads/dev'
        run: |
          url=$(vercel deploy --prebuilt --yes \
                               --scope=udt --token=${{ secrets.VERCEL_TOKEN }})
          echo "Preview URL: $url"
          echo "VERCEL_PREVIEW_URL=$url" >> $GITHUB_ENV

      - name: Deploy to Vercel (production)
        if: github.ref == 'refs/heads/main'
        run: |
          url=$(vercel deploy --prebuilt --prod --yes \
                               --scope=udt --token=${{ secrets.VERCEL_TOKEN }})
          echo "Production URL: $url"
          echo "VERCEL_PRODUCTION_URL=$url" >> $GITHUB_ENV
