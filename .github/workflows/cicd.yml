name: CI/CD with GitHub Actions

on:
  push:
    branches: ['dev', 'main']
  pull_request:
    branches: ['dev', 'main']

jobs:
# ───────────────────────────────────────────
# 1) BUILD – .vercel/output + tar 아카이브
# ───────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    strategy: { matrix: { node-version: [22.x] } }

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: ${{ matrix.node-version }}, cache: npm }

      - run: npm ci
      - run: npm install -g vercel@latest

      # ENV 가져오기
      - run: |
          vercel pull --yes \
            --environment ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      # 빌드
      - run: |
          vercel build --yes ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} \
            --scope udt \
            --token ${{ secrets.VERCEL_TOKEN }}

      # 결과 확인 (디버그용)
      - run: ls -Rla .vercel | head -n 50

      # .vercel → tar.gz
      - run: tar -czf vercel-prebuilt.tgz .vercel

      # 업로드
      - uses: actions/upload-artifact@v4
        with:
          name: vercel-prebuilt
          path: vercel-prebuilt.tgz
          retention-days: 1
          if-no-files-found: error

# ───────────────────────────────────────────
# 2) DEPLOY – 의존성 설치 후 --prebuilt 배포
# ───────────────────────────────────────────
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Download prebuilt artifact
        uses: actions/download-artifact@v4
        with: { name: vercel-prebuilt }

      - run: tar -xzf vercel-prebuilt.tgz          # .vercel 복원

      # ▶ 의존성 재설치 (prod‑deps만)
      - uses: actions/setup-node@v4
        with: { node-version: 22, cache: npm }
      - run: npm ci --omit=dev                     # ← 핵심

      - run: npm install -g vercel@latest

      # 배포
      - name: Deploy to Vercel (preview)
        if: github.ref == 'refs/heads/dev'
        run: |
          url=$(vercel deploy --prebuilt --yes \
                               --scope udt \
                               --token ${{ secrets.VERCEL_TOKEN }})
          echo "Preview URL: $url"
          echo "VERCEL_PREVIEW_URL=$url" >> $GITHUB_ENV

      - name: Deploy to Vercel (production)
        if: github.ref == 'refs/heads/main'
        run: |
          url=$(vercel deploy --prebuilt --prod --yes \
                               --scope udt \
                               --token ${{ secrets.VERCEL_TOKEN }})
          echo "Production URL: $url"
          echo "VERCEL_PRODUCTION_URL=$url" >> $GITHUB_ENV

      # (옵션) PR 코멘트
      - name: Comment PR with preview link
        if: github.base_ref == 'dev' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Preview deployment ready!\n\n👀 Preview: ${process.env.VERCEL_PREVIEW_URL}`
            })
